{"ast":null,"code":"import _objectSpread from \"/Users/sharon.santana/Desktop/prod_projects/InventorySystem/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/sharon.santana/Desktop/prod_projects/InventorySystem/client/src/containers/AddNewStoreProduct/index.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport swal from 'sweetalert';\nimport axios from 'axios';\nimport './style.css';\n\nclass AddNewStoreProduct extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = async event => {\n      event.preventDefault();\n      let store_id = this.state.store_id;\n      let product_id = this.state.product_id;\n      let store_name = this.state.store_name;\n      let products = this.state.all_products; // let product_name = this.state.product_name;\n\n      let product_price = this.state.product_price;\n      let product_qty = this.state.product_qty;\n      let product_img_url = this.state.product_img_url;\n      let product_comment = this.state.product_comment;\n      let inventory_insert_response = '';\n\n      if (product_id === '') {\n        swal(\"Oops!\", \"Product Name is a required field.\", \"error\");\n      } else if (product_price === '') {\n        swal(\"Oops!\", \"Product Price is a required field.\", \"error\");\n      } else if (this.isValidFloat(product_price) === false) {\n        swal(\"Oops!\", \"Enter a Valid Product Price. Example: 0.00\", \"error\");\n      } else if (product_qty === '') {\n        swal(\"Oops!\", \"Product Qty is a required field.\", \"error\");\n      } else if (product_img_url === '') {\n        swal(\"Oops!\", \"Product Image URL is a required field.\", \"error\");\n      }\n\n      if (product_id !== '' && product_price !== '' && this.isValidFloat(product_price) === true && product_qty !== '') {\n        try {\n          // add the new product to the inventory table and associate it to the store\n          inventory_insert_response = await axios.post(`http://localhost:3001/api/inventory`, {\n            product_id: product_id,\n            store_id: store_id,\n            quantity: product_qty,\n            local_price: product_price,\n            comment: product_comment\n          }, {\n            headers: {\n              'Accept': 'application/json'\n            }\n          });\n\n          if (inventory_insert_response.status === 200) {\n            swal(\"Success!\", `A new product has been added to store ${store_name}!`, \"info\").then(value => {\n              window.location.href = `/stores/products/${store_id}`;\n            });\n          }\n        } catch (e) {\n          console.log(e);\n          swal(\"Oops!\", \"Something went wrong adding this product to inventory.\", \"error\");\n        }\n      }\n    };\n\n    this.state = {\n      all_products: [],\n      current_inventory: [],\n      store_name: '',\n      store_id: '',\n      product_id: '',\n      product_name: '',\n      product_price: '',\n      product_qty: 100,\n      product_comment: ''\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSelectChange = this.handleSelectChange.bind(this);\n    this.isValidFloat = this.isValidFloat.bind(this);\n  }\n\n  componentDidMount() {\n    const store_name = this.props.match.params.store_name;\n    const store_id = this.props.match.params.store_id;\n    this.setState({\n      store_name: store_name,\n      store_id: store_id\n    });\n    axios.get('/api/products').then(response => {\n      this.setState({\n        all_products: response.data\n      });\n    }).catch(e => {\n      console.log(e);\n    });\n    axios.get('/api/inventory').then(response => {\n      this.setState({\n        current_inventory: response.data\n      });\n    }).catch(e => {\n      console.log(e);\n    });\n  }\n\n  handleInputChange(e) {\n    let value = e.target.value;\n    let name = e.target.name;\n    this.setState(prevState => _objectSpread({}, prevState, {\n      [name]: value\n    }), () => console.log(this.state));\n  }\n\n  handleSelectChange(e) {\n    let value = e.target.value;\n    let name = e.target.name;\n    this.setState(prevState => _objectSpread({}, prevState, {\n      [name]: value\n    }), () => console.log(this.state));\n  }\n\n  isValidFloat(num) {\n    let regex = /^\\d*\\.?\\d*$/;\n\n    if (regex.test(num)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  get_prods_not_in_store() {\n    // this function makes a list of product ids that are not part of the current store in question\n    let inventory = this.state.current_inventory.filter(line => parseInt(line.store_id) === parseInt(this.state.store_id)) // return list of all prods belonging to this store_id\n    .map(entry => entry.product_id); // return list of list with all revelant prod ids\n\n    let products = this.state.all_products.map(entry => entry.id);\n    let list_of_products_not_in_store = []; // for every product id, look for that (product id [associated to] store id) and if associacion exist, don't add to final list\n\n    for (let prod in products) {\n      if (!inventory.includes(products[prod])) {\n        list_of_products_not_in_store.push(products[prod]);\n      }\n    }\n\n    return list_of_products_not_in_store;\n  }\n\n  render() {\n    // make a list of all the product_ids not associated to this store\n    let list_of_products_not_in_store = this.get_prods_not_in_store(); // make a dropdown Menu with all of the products available products from the Products DB (BUT NOT YET ASSOCIATED TO THIS STORE)\n\n    let select_products = this.state.all_products.filter(product => list_of_products_not_in_store.includes(product.id)).map(prod => React.createElement(\"option\", {\n      key: prod.id,\n      value: prod.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, prod.product_name));\n    return React.createElement(\"div\", {\n      className: \"wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      className: \"container-fluid\",\n      encType: \"multipart/form-data\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, \"Add New Product to Store from Global Inventory\"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"Store Name: \", this.state.store_name), React.createElement(\"div\", {\n      className: \"add_row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"Product Name (*): \"), React.createElement(\"select\", {\n      onChange: e => this.handleSelectChange(e),\n      name: \"product_id\",\n      className: \"form-control\",\n      id: \"product_id\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"-- Select --\"), select_products)), React.createElement(\"div\", {\n      className: \"add_row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \"Local Product Price (*):\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"product_price\",\n      className: \"form-control\",\n      name: \"product_price\",\n      onChange: e => this.handleInputChange(e),\n      value: this.state.product_price,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"add_row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, \"Initial product qty at this store (*):\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"product_qty\",\n      className: \"form-control\",\n      name: \"product_qty\",\n      onChange: e => this.handleInputChange(e),\n      value: this.state.product_qty,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"add_row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, \"Initial Product Comments (optional):\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"product_comment\",\n      className: \"form-control\",\n      name: \"product_comment\",\n      onChange: e => this.handleInputChange(e),\n      value: this.state.product_comment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"add_store_action_btn_block\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.handleSubmit,\n      className: \"btn btn-outline-primary action_btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, \"Submit\"), React.createElement(Link, {\n      to: `/stores/products/${this.state.store_id}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-outline-danger action_btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, \"Cancel\")))));\n  }\n\n}\n\nexport default AddNewStoreProduct;","map":{"version":3,"sources":["/Users/sharon.santana/Desktop/prod_projects/InventorySystem/client/src/containers/AddNewStoreProduct/index.js"],"names":["React","Component","Link","swal","axios","AddNewStoreProduct","constructor","props","handleSubmit","event","preventDefault","store_id","state","product_id","store_name","products","all_products","product_price","product_qty","product_img_url","product_comment","inventory_insert_response","isValidFloat","post","quantity","local_price","comment","headers","status","then","value","window","location","href","e","console","log","current_inventory","product_name","handleInputChange","bind","handleSelectChange","componentDidMount","match","params","setState","get","response","data","catch","target","name","prevState","num","regex","test","get_prods_not_in_store","inventory","filter","line","parseInt","map","entry","id","list_of_products_not_in_store","prod","includes","push","render","select_products","product"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport swal from 'sweetalert';\nimport axios from 'axios';\nimport './style.css';\n\nclass AddNewStoreProduct extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            all_products: [],\n            current_inventory: [],\n            store_name: '',\n            store_id: '',\n            product_id: '',\n            product_name: '',\n            product_price: '',\n            product_qty: 100,\n            product_comment: ''\n        }\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSelectChange = this.handleSelectChange.bind(this);\n        this.isValidFloat = this.isValidFloat.bind(this);\n    }\n\n    componentDidMount() {\n        const { store_name } = this.props.match.params;\n        const { store_id } = this.props.match.params;\n        this.setState({ store_name: store_name, store_id: store_id })\n\n        axios.get('/api/products')\n            .then(response => {\n                this.setState({ all_products: response.data });\n            })\n            .catch(e => {\n                console.log(e);\n            });\n\n        axios.get('/api/inventory')\n            .then(response => {\n                this.setState({ current_inventory: response.data });\n            })\n            .catch(e => {\n                console.log(e);\n            });\n    }\n\n    handleInputChange(e) {\n        let value = e.target.value;\n        let name = e.target.name;\n        this.setState(prevState => ({\n            ...prevState, [name]: value\n\n        }), () => console.log(this.state))\n    }\n\n    handleSelectChange(e) {\n        let value = e.target.value;\n        let name = e.target.name;\n        this.setState(prevState => ({\n            ...prevState, [name]: value\n\n        }), () => console.log(this.state))\n    }\n\n    isValidFloat(num) {\n        let regex = /^\\d*\\.?\\d*$/;\n        if (regex.test(num)) {\n            return true;\n        }\n        return false;\n    }\n\n    handleSubmit = async event => {\n        event.preventDefault();\n\n        let store_id = this.state.store_id;\n        let product_id = this.state.product_id;\n        let store_name = this.state.store_name;\n        let products = this.state.all_products;\n        // let product_name = this.state.product_name;\n        let product_price = this.state.product_price;\n        let product_qty = this.state.product_qty;\n        let product_img_url = this.state.product_img_url;\n        let product_comment = this.state.product_comment;\n\n        let inventory_insert_response = '';\n\n        if (product_id === '') {\n            swal(\"Oops!\", \"Product Name is a required field.\", \"error\");\n        } else if (product_price === '') {\n            swal(\"Oops!\", \"Product Price is a required field.\", \"error\");\n        } else if (this.isValidFloat(product_price) === false) {\n            swal(\"Oops!\", \"Enter a Valid Product Price. Example: 0.00\", \"error\");\n        } else if (product_qty === '') {\n            swal(\"Oops!\", \"Product Qty is a required field.\", \"error\");\n        } else if (product_img_url === '') {\n            swal(\"Oops!\", \"Product Image URL is a required field.\", \"error\");\n        }\n\n        if (product_id !== '' && product_price !== '' && this.isValidFloat(product_price) === true && product_qty !== '') {\n\n            try {\n                // add the new product to the inventory table and associate it to the store\n                inventory_insert_response = await axios.post(`http://localhost:3001/api/inventory`, { product_id: product_id, store_id: store_id, quantity: product_qty, local_price: product_price, comment: product_comment }, { headers: { 'Accept': 'application/json' } });\n\n                if (inventory_insert_response.status === 200) {\n                    swal(\"Success!\", `A new product has been added to store ${store_name}!`, \"info\")\n                        .then((value) => {\n                            window.location.href = `/stores/products/${store_id}`\n                        })\n                }\n            } catch (e) {\n                console.log(e)\n                swal(\"Oops!\", \"Something went wrong adding this product to inventory.\", \"error\");\n            }\n        }\n    }\n\n    get_prods_not_in_store() {\n        // this function makes a list of product ids that are not part of the current store in question\n        let inventory = this.state.current_inventory\n        .filter(line => parseInt(line.store_id) === parseInt(this.state.store_id)) // return list of all prods belonging to this store_id\n        .map(entry => entry.product_id); // return list of list with all revelant prod ids\n\n        let products = this.state.all_products.map(entry => entry.id);\n        \n        let list_of_products_not_in_store = [];\n\n        // for every product id, look for that (product id [associated to] store id) and if associacion exist, don't add to final list\n        for (let prod in products) {\n            if (!inventory.includes(products[prod])){\n                list_of_products_not_in_store.push(products[prod]);\n            }\n        }\n        return list_of_products_not_in_store;\n    }\n    render() {\n\n        // make a list of all the product_ids not associated to this store\n        let list_of_products_not_in_store = this.get_prods_not_in_store();\n        \n        // make a dropdown Menu with all of the products available products from the Products DB (BUT NOT YET ASSOCIATED TO THIS STORE)\n        let select_products =\n            this.state.all_products\n            .filter( product => (list_of_products_not_in_store.includes( product.id )))\n            .map ( prod => <option key={prod.id} value={prod.id}>{prod.product_name}</option> );\n        return (\n            <div className=\"wrapper\">\n                <form className=\"container-fluid\" encType=\"multipart/form-data\">\n                    <h2 className=\"header\">Add New Product to Store from Global Inventory</h2>\n                    <h3>Store Name: {this.state.store_name}</h3>\n                    <div className=\"add_row\">\n                        <label>Product Name (*): </label>\n                        <select\n                            onChange={(e) => this.handleSelectChange(e)}\n                            name=\"product_id\"\n                            className=\"form-control\"\n                            id=\"product_id\"\n                            required\n                        >\n                            <option value=\"\">-- Select --</option>\n                            {select_products}\n                        </select>\n                    </div>\n                    <div className=\"add_row\">\n                        <label>Local Product Price (*):</label>\n                        <input\n                            type=\"text\"\n                            id=\"product_price\"\n                            className=\"form-control\"\n                            name={\"product_price\"}\n                            onChange={(e) => this.handleInputChange(e)}\n                            value={this.state.product_price}\n                            required\n                        />\n                    </div>\n                    <div className=\"add_row\">\n                        <label>Initial product qty at this store (*):</label>\n                        <input\n                            type=\"text\"\n                            id=\"product_qty\"\n                            className=\"form-control\"\n                            name={\"product_qty\"}\n                            onChange={(e) => this.handleInputChange(e)}\n                            value={this.state.product_qty}\n                            required\n                        />\n                    </div>\n                    <div className=\"add_row\">\n                        <label>Initial Product Comments (optional):</label>\n                        <input\n                            type=\"text\"\n                            id=\"product_comment\"\n                            className=\"form-control\"\n                            name=\"product_comment\"\n                            onChange={(e) => this.handleInputChange(e)}\n                            value={this.state.product_comment}\n                        />\n                    </div>\n                    <div className=\"add_store_action_btn_block\">\n                        <button onClick={this.handleSubmit} className=\"btn btn-outline-primary action_btn\">Submit</button>\n                        <Link to={`/stores/products/${this.state.store_id}`}><button className=\"btn btn-outline-danger action_btn\">Cancel</button></Link>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default AddNewStoreProduct;\n\n\n\n"]},"metadata":{},"sourceType":"module"}